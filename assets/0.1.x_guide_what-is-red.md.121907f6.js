import{_ as e,c as t,o as a,a as r}from"./app.1de793c8.js";const m=JSON.parse('{"title":"What is Red?","description":"","frontmatter":{},"headers":[{"level":2,"title":"Motivation","slug":"motivation","link":"#motivation","children":[]},{"level":2,"title":"Features","slug":"features","link":"#features","children":[]},{"level":2,"title":"The Future of Red","slug":"the-future-of-red","link":"#the-future-of-red","children":[]}],"relativePath":"0.1.x/guide/what-is-red.md"}'),s={name:"0.1.x/guide/what-is-red.md"},i=r('<h1 id="what-is-red" tabindex="-1">What is Red? <a class="header-anchor" href="#what-is-red" aria-hidden="true">#</a></h1><p>Red is networking library for roblox that combines efficency with ease of use.</p><div class="warning custom-block"><p class="custom-block-title">There be dragons!</p><p>Red is currently in a pre-release state. This means that the API is subject to change and there <em>could</em> be bugs or unintended behavior.</p></div><h2 id="motivation" tabindex="-1">Motivation <a class="header-anchor" href="#motivation" aria-hidden="true">#</a></h2><p>Roblox networking is annoying to use at scale.</p><p>Projects like Knit and RbxNet attempt to solve this problem in different ways. Knit is a full framework that provides a lifecycle and singletons to manage networking. RbxNet is a typesafe networking library designed to be used with typescript.</p><p>Red takes inspiration from these projects, and from BridgeNet, a networking library with a focus on performance. <strong>Huge credit to ffrostfall.</strong> BridgeNet fails in completeness, it was designed as a proof of concept, and not a library for use in production. However the concept is sound, and Red uses the same design to achieve similar performance.</p><p>I set out to create a library that is effortlessly performant, easy to use and understand, and is truly a library, not a framework.</p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-hidden="true">#</a></h2><ul><li><strong>Effortlessly Performant</strong> <br> Red packs events into a single remote event call, and packs event names into identifiers that take less space. None of this creates extra work for the developer.</li><li><strong>Structure</strong> <br> Red is designed with a very simple structure in mind. Events are split into groups called namespaces. Each namespace can send events, receive events, and make remote calls.</li><li><strong>Typesafe</strong> <br> The entire Red codebase is written in strict luau. This helps prevent bugs and assures that all intellisense is available and accurate.</li></ul><h2 id="the-future-of-red" tabindex="-1">The Future of Red <a class="header-anchor" href="#the-future-of-red" aria-hidden="true">#</a></h2><p>Red is currently in a pre-release state. I will personally be using Red in my own projects, and will be fixing any bugs I stumble upon and adding features as I need them. Feel free to contribute to the project, or open an issue if you find any bugs.</p>',12),n=[i];function o(d,l,c,u,h,f){return a(),t("div",null,n)}const g=e(s,[["render",o]]);export{m as __pageData,g as default};
