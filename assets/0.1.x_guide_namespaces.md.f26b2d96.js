import{_ as s,c as a,o as n,a as e}from"./app.1de793c8.js";const F=JSON.parse('{"title":"Namespaces","description":"","frontmatter":{},"headers":[{"level":2,"title":"What is a Namespace?","slug":"what-is-a-namespace","link":"#what-is-a-namespace","children":[]},{"level":2,"title":"Creating a Namespace","slug":"creating-a-namespace","link":"#creating-a-namespace","children":[]},{"level":2,"title":"Firing Events","slug":"firing-events","link":"#firing-events","children":[]},{"level":2,"title":"Registering Callbacks","slug":"registering-callbacks","link":"#registering-callbacks","children":[]},{"level":2,"title":"Calling Remote Functions","slug":"calling-remote-functions","link":"#calling-remote-functions","children":[]},{"level":2,"title":"Replication and Remote Values","slug":"replication-and-remote-values","link":"#replication-and-remote-values","children":[]},{"level":2,"title":"Identifiers","slug":"identifiers","link":"#identifiers","children":[]}],"relativePath":"0.1.x/guide/namespaces.md"}'),l={name:"0.1.x/guide/namespaces.md"},o=e(`<h1 id="namespaces" tabindex="-1">Namespaces <a class="header-anchor" href="#namespaces" aria-hidden="true">#</a></h1><p>It&#39;s impossible to do anything in Red without using namespaces. Even global events are just in a global namespace.</p><h2 id="what-is-a-namespace" tabindex="-1">What is a Namespace? <a class="header-anchor" href="#what-is-a-namespace" aria-hidden="true">#</a></h2><p>Think of a namespace as a folder that you put your events in, or if you&#39;re coming from Knit, a service. Namespaces contain groups of events that are related to each other.</p><h2 id="creating-a-namespace" tabindex="-1">Creating a Namespace <a class="header-anchor" href="#creating-a-namespace" aria-hidden="true">#</a></h2><p>Let&#39;s start by accessing the global namespace from the server.</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> Red </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(Path.</span><span style="color:#FFCB6B;">To</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">Red</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> Namespace </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Red.</span><span style="color:#82AAFF;">Server</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Namespaces are global, this means no matter how many times you call <code>Red.Server</code> you will always get the same namespace object.</p></div><h2 id="firing-events" tabindex="-1">Firing Events <a class="header-anchor" href="#firing-events" aria-hidden="true">#</a></h2><p>Let&#39;s start by firing an event on the client.</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> Red </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(Path.</span><span style="color:#FFCB6B;">To</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">Red</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> Namespace </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Red.</span><span style="color:#82AAFF;">Client</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">MyNamespace</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Namespace</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">Fire</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">HelloWorld</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>Here we just fired the <code>HelloWorld</code> event with no arguments.</p><h2 id="registering-callbacks" tabindex="-1">Registering Callbacks <a class="header-anchor" href="#registering-callbacks" aria-hidden="true">#</a></h2><p>Now let&#39;s register a callback on the server to listen to this event.</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> Red </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(Path.</span><span style="color:#FFCB6B;">To</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">Red</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> Namespace </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Red.</span><span style="color:#82AAFF;">Server</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">MyNamespace</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Namespace</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">Callback</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">HelloWorld</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello World!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">end</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>What if we wanted to get a return from the server? We can simply just return a value from the callback.</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> Red </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(Path.</span><span style="color:#FFCB6B;">To</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">Red</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> Namespace </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Red.</span><span style="color:#82AAFF;">Server</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">MyNamespace</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Namespace</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">Callback</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">HelloWorld</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello World!</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">end</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Only server callbacks can return a value.</p></div><h2 id="calling-remote-functions" tabindex="-1">Calling Remote Functions <a class="header-anchor" href="#calling-remote-functions" aria-hidden="true">#</a></h2><p>When firing an event, the return value of the server callback is ignored. If you want to get a return value from the server callback you must use the <code>Call</code> method.</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> Red </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(Path.</span><span style="color:#FFCB6B;">To</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">Red</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> Namespace </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Red.</span><span style="color:#82AAFF;">Client</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">MyNamespace</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Namespace</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">Call</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">HelloWorld</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">):</span><span style="color:#82AAFF;">Then</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>The call method returns a promise. This means you get to choose if you want to assign a callback for when the call returns, or if you want to yield until the call returns. Any errors on the server will result in the promise being rejected with the error.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Red uses a custom promise implementation for a few reasons. You can find out more about it <a href="./../util/promise.html">here</a>.</p></div><h2 id="replication-and-remote-values" tabindex="-1">Replication and Remote Values <a class="header-anchor" href="#replication-and-remote-values" aria-hidden="true">#</a></h2><p>Roblox has an excellent and performant replication system. Red allows you to utilize this system to replicate data, in whatever structure you&#39;d like.</p><p>Calling <code>Namespace:Instance()</code> will return a folder that you can place any instances in, and they will be replicated as if it was just a folder in Replicated Storage (hint: it is!).</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> Red </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(Path.</span><span style="color:#FFCB6B;">To</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">Red</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> Namespace </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Red.</span><span style="color:#82AAFF;">Server</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">MyNamespace</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> Folder </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Namespace</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">Instance</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> Value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Instance.</span><span style="color:#82AAFF;">new</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">StringValue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Value.</span><span style="color:#FFCB6B;">Name</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">HelloWorld</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">Value.</span><span style="color:#FFCB6B;">Value</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello World!</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Value.</span><span style="color:#FFCB6B;">Parent</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Folder</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Use attributes! They may be somewhat new, but they save a lot of time when it comes to data replication like this.</p></div><p>While it is impossible to replicate directly to one player, this is better than a remote value object built over remote events in terms of performance. If remote events were to get reliability types, then Red would use them instead. Feel free to use Red events to replicate data to one player.</p><h2 id="identifiers" tabindex="-1">Identifiers <a class="header-anchor" href="#identifiers" aria-hidden="true">#</a></h2><p>Due to how the event system works, if a server is only firing an event, and not listening to it, then it is impossible for the client to listen to it until the server has fired it. This issue is solved by explicitly telling Red what events you will use when you create the namespace.</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> Red </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(Path.</span><span style="color:#FFCB6B;">To</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">Red</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> Namespace </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Red.</span><span style="color:#82AAFF;">Server</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">MyNamespace</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, {</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">HelloWorld</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">})</span></span>
<span class="line"></span></code></pre></div><p>This tells Red that the event <code>HelloWorld</code> will be used, so it needs to register it. The client can now listen to this event.</p>`,33),p=[o];function t(c,r,i,y,C,D){return n(),a("div",null,p)}const d=s(l,[["render",t]]);export{F as __pageData,d as default};
