import{_ as e,c as a,o as r,a as i}from"./app.1de793c8.js";const f=JSON.parse('{"title":"Red","description":"","frontmatter":{},"headers":[{"level":2,"title":"Functions","slug":"functions","link":"#functions","children":[{"level":3,"title":"Client","slug":"client","link":"#client","children":[]},{"level":3,"title":"Server","slug":"server","link":"#server","children":[]},{"level":3,"title":"Spawn","slug":"spawn","link":"#spawn","children":[]}]},{"level":2,"title":"Classes","slug":"classes","link":"#classes","children":[{"level":3,"title":"Signal","slug":"signal","link":"#signal","children":[]},{"level":3,"title":"Promise","slug":"promise","link":"#promise","children":[]},{"level":3,"title":"Clock","slug":"clock","link":"#clock","children":[]}]}],"relativePath":"0.1.x/api/red.md"}'),n={name:"0.1.x/api/red.md"},t=i('<h1 id="red" tabindex="-1">Red <a class="header-anchor" href="#red" aria-hidden="true">#</a></h1><p>The root of the Red API.</p><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-hidden="true">#</a></h2><h3 id="client" tabindex="-1">Client <a class="header-anchor" href="#client" aria-hidden="true">#</a></h3><p><code>() -&gt; Client</code><br><code>(Name: string) -&gt; Client</code><br><code>(Identifiers: { string }) -&gt; Client</code><br><code>(Name: string, Identifiers: { string }) -&gt; Client</code></p><p>Returns a new <a href="./client.html">client namespace</a> based on the given arguments.</p><p>If you pass no arguments, you are given the global namespace. The name argument is the name of the namespace you would like to access, and the identifiers argument is explained <a href="./../guide/namespaces.html#identifiers">here</a>.</p><p>This function will error if called from the server.</p><h3 id="server" tabindex="-1">Server <a class="header-anchor" href="#server" aria-hidden="true">#</a></h3><p><code>() -&gt; Server</code><br><code>(Name: string) -&gt; Server</code><br><code>(Identifiers: { string }) -&gt; Server</code><br><code>(Name: string, Identifiers: { string }) -&gt; Server</code></p><p>Returns a new <a href="./server.html">server namespace</a> based on the given arguments.</p><p>If you pass no arguments, you are given the global namespace. The name argument is the name of the namespace you would like to access, and the identifiers argument is explained <a href="./../guide/namespaces.html#identifiers">here</a>.</p><p>This function will error if called from the client.</p><h3 id="spawn" tabindex="-1">Spawn <a class="header-anchor" href="#spawn" aria-hidden="true">#</a></h3><p><code>&lt;T...&gt;(Callback: (T...) -&gt; (), T...) -&gt; ()</code></p><p>Uses the <a href="./../util/spawn.html">Spawn Util</a> to spawn the callback in a new thread.</p><h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-hidden="true">#</a></h2><h3 id="signal" tabindex="-1">Signal <a class="header-anchor" href="#signal" aria-hidden="true">#</a></h3><p>A reference to the <a href="./../util/signal.html">Signal</a> class.</p><h3 id="promise" tabindex="-1">Promise <a class="header-anchor" href="#promise" aria-hidden="true">#</a></h3><p>A reference to the <a href="./../util/promise.html">Promise</a> class.</p><h3 id="clock" tabindex="-1">Clock <a class="header-anchor" href="#clock" aria-hidden="true">#</a></h3><p>A reference to the <a href="./../util/clock.html">Clock</a> class.</p>',23),s=[t];function l(c,d,h,o,p,u){return r(),a("div",null,s)}const m=e(n,[["render",l]]);export{f as __pageData,m as default};
